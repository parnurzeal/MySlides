GoRequest
A Simplified Http Client 
30 May 2014

Theeraphol Wattanavekin
Rakuten, Inc.
@parnurzeal
http://www.parnurzeal.com
http://github.com/parnurzeal/gorequest

* About Me

* Theeraphol Wattanavekin -> A
- Originally from Bangkok, Thailand
- Currently, working in Rakuten, Inc. - An infrastructure developer 


* GoRequest 

* Motivation

- Simpler http client (similar to Node.js SuperAgent)
- Cleaner and maintainable code
- Fun! (Learn and PoC idea)

* Features
GoRequest is currently supporting many features:

- Get/Post/Put/Head/Delete
- Set - simple header setting
- JSON - made it simple with JSON string as a parameter
- Proxy - sending request via proxy
- Timeout - setting timeout for a request
- more coming soon..

* GET Request
- Go standard lib:
  
  resp, err := http.Get("http://example.com/")

- GoRequest:

  request := gorequest.New()
  resp, body, errs := request.Get("http://example.com/").End()

Or below if you don't want to reuse it for other requests.

  resp, body, errs := gorequest.New().Get("http://example.com/").End()

* JSON Post Request

- Go standard lib:

.code examples/go_postjson.go

* JSON Post Request

- GoRequest:

.code examples/gorequest_postjson.go

- Detect JSON and set content-type to json
- Marshal it and Send body request as JSON format

* Form Request

- GoRequest:

  request := gorequest.New()
  resp, body, errs := request.Post("http://example.com").Send("query=tonkatsu").End()

- Detect query string for form and set content-type to x-www-form-urlencoded
- Send it as correct body request format ( param1=value1&param2=value2 )

* Proxy

- GoRequest:

  request := gorequest.New().Proxy("http://proxy:999")
  resp, body, errs := request.Get("http://example-proxy.com").End()

To reuse same client with no_proxy, use empty string:

  resp, body, errs = request.Proxy("").("http://example-no-proxy.com").End()

* Timeout

- GoRequest:

  request := gorequest.New().Timeout(2*time.Millisecond)
  resp, body, errs := request.Get("http://example.com").End()

* Callback

- GoRequest (not callback):

  resp, body, errs := gorequest.New().Get("http://example.com").End(printBody) 
  fmt.Println(resp.Status) 

- GoRequest (callback):

  func printBody(resp gorequest.Response, body string, errs []error){
    fmt.Println(resp.Status)
  }
  gorequest.New().Get("http://example.com").End(printBody) 

* Future work

Currently, supporting many other features than showing in slides 

- Check it out: github.com/parnurzeal/gorequest

Future features include:

- Cookies
- Retry
- Basic auth
- ... much more
